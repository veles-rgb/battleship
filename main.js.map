{"version":3,"file":"main.js","mappings":";;;;AAAA;;AAEO;AACP;AACA;;AAEA,oBAAoB,QAAQ;AAC5B,wBAAwB,QAAQ;AAChC;AACA;AACA,oCAAoC,EAAE,GAAG,EAAE;AAC3C;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,oBAAoB,iBAAiB;AACrC,wBAAwB,oBAAoB;AAC5C;AACA,qCAAqC,EAAE,GAAG,EAAE;AAC5C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AClEA;AACA;AACA,iCAAiC,YAAY;AAC7C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;;AAEA;AACA,0BAA0B,MAAM;AAChC;;AAEA;AACA,0BAA0B,MAAM;AAChC;AACA,SAAS;;AAET;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,gDAAgD,EAAE,GAAG,EAAE;AACvD,mDAAmD,EAAE,GAAG,EAAE;AAC1D;AACA;AACA,wBAAwB,QAAQ;AAChC,4BAA4B,QAAQ;AACpC,qCAAqC,EAAE,GAAG,EAAE;AAC5C;AACA;AACA;AACA;AACA;;;;AC/EwC;;AAExC;AACA;AACA;AACA,6BAA6B,SAAS;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;ACvBA;AAC8B;AACD;AAC8B;AACd;AACJ;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;;AAEA;AACA;AACA,4CAA4C,gBAAgB;AAC5D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,IAAI;AAC7C;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,MAAM;;AAEtB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI,UAAU;AACd,IAAI,UAAU;;AAEd,IAAI,WAAW;AACf;AACA;AACA;AACA;AACA;AACA,IAAI,WAAW;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,GAAG,GAAG,GAAG;AAC1C;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,IAAI;AAChB;;AAEA;AACA;AACA;AACA;;AAEA,IAAI,WAAW;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA,6CAA6C,QAAQ;;AAErD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,kDAAkD,QAAQ;AAC1D;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI,WAAW;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,IAAI,WAAW;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,GAAG,GAAG,GAAG;AAC1C,oCAAoC,GAAG,GAAG,GAAG;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack:///./src/js/modules/dom.js","webpack:///./src/js/modules/gameboard.js","webpack:///./src/js/modules/player.js","webpack:///./src/js/modules/ship.js","webpack:///./src/js/index.js"],"sourcesContent":["// dom.js\n\nexport function createGrid(container) {\n    container.innerHTML = '';\n    container.classList.add('gameboard');\n\n    for (let x = 0; x < 10; x++) {\n        for (let y = 0; y < 10; y++) {\n            const cell = document.createElement('div');\n            cell.classList.add('cell');\n            cell.dataset.coord = `${x},${y}`;\n            container.appendChild(cell);\n        }\n    }\n}\n\nexport function renderBoard(\n    container,\n    grid,\n    hitShots = [],\n    missedShots = [],\n    hideShips = false\n) {\n    // Clear previous status classes\n    container.querySelectorAll('.cell').forEach(cell => {\n        cell.classList.remove('hit', 'miss', 'ship', 'sunk');\n    });\n\n    // Loop over each grid cell\n    for (let x = 0; x < grid.length; x++) {\n        for (let y = 0; y < grid[x].length; y++) {\n            const cellEl = container.querySelector(\n                `.cell[data-coord=\"${x},${y}\"]`\n            );\n            const ship = grid[x][y];\n\n            // Reveal sunk ships always (even if hideShips=true)\n            if (ship) {\n                const sunk =\n                    typeof ship.hasSunk === 'function'\n                        ? ship.hasSunk()\n                        : ship.isSunk;\n                if (sunk) {\n                    cellEl.classList.add('sunk');\n                    continue;\n                }\n            }\n\n            // Mark hits (non-sunk)\n            if (hitShots.some(([hx, hy]) => hx === x && hy === y)) {\n                cellEl.classList.add('hit');\n                continue;\n            }\n\n            // Mark misses\n            if (missedShots.some(([mx, my]) => mx === x && my === y)) {\n                cellEl.classList.add('miss');\n                continue;\n            }\n\n            // Reveal remaining ships if allowed\n            if (ship && !hideShips) {\n                cellEl.classList.add('ship');\n            }\n        }\n    }\n}\n","class Gameboard {\n    constructor() {\n        this.grid = Array.from({ length: 10 }, () => Array(10).fill(null));\n        this.ships = [];\n        this.hitShots = [];\n        this.missedShots = [];\n    }\n\n    placeShip(ship, [startX, startY], direction) {\n        // Out-of-bounds check\n        if (direction === 'vertical' && startX + ship.length > 10) return false;\n        if (direction === 'horizontal' && startY + ship.length > 10) return false;\n\n        // Overlap check (ship already in coords)\n        const coords = [];\n        for (let i = 0; i < ship.length; i++) {\n            // x = row index, y = column index\n            const x = direction === 'vertical' ? startX + i : startX;\n            const y = direction === 'horizontal' ? startY + i : startY;\n\n            if (this.grid[x][y] !== null) return false;\n            coords.push({ x, y });\n        }\n\n        // Place the ship after checks\n        coords.forEach(({ x, y }) => {\n            this.grid[x][y] = ship;\n        });\n\n        // Add ship to board.ships\n        this.ships.push(ship);\n        return true;\n    }\n\n\n    receiveAttack([x, y]) {\n        // Check for attack or miss on coords\n        const coordsHit = this.hitShots.some(\n            (coords) => coords[0] === x && coords[1] === y\n        );\n        const coordsMissed = this.hitShots.some(\n            (coords) => coords[0] === x && coords[1] === y\n        );\n\n        // Don't receive attack if coords have been hit or missed already\n        if (coordsHit || coordsMissed) return false;\n\n        const target = this.grid[x][y];\n\n        // Determine if shot is a hit or miss if not hit or missed already\n        if (target === null) {\n            // Miss\n            this.missedShots.push([x, y]);\n            return false;\n        } else {\n            // Hit\n            target.hit();\n            this.hitShots.push([x, y]);\n            return true;\n        }\n    }\n\n    allShipsSunk() {\n        return this.ships.every((ship) => ship.isSunk);\n    }\n\n    getAvailableMoves() {\n        const attacked = new Set([\n            ...this.hitShots.map(([x, y]) => `${x},${y}`),\n            ...this.missedShots.map(([x, y]) => `${x},${y}`)\n        ]);\n        const moves = [];\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                if (!attacked.has(`${x},${y}`)) moves.push([x, y]);\n            }\n        }\n        return moves;\n    }\n}\n\nexport { Gameboard };","import { Gameboard } from \"./gameboard\";\n\nclass Player {\n    constructor(type) {\n        this.type = type;\n        this.gameboard = new Gameboard();\n        // For computer attacks\n        this.targetQueue = [];\n        this.lastHitShip = null;\n    }\n\n    // Method for computer attacks\n    chooseRandomAttack(opponentBoard) {\n        // Get target coords (if there targetQueue not empty)\n        while (this.targetQueue.length > 0) {\n            let coord = this.targetQueue.shift();\n            let moves = opponentBoard.getAvailableMoves();\n            if (moves.some(m => m[0] === coord[0] && m[1] === coord[1])) {\n                return coord;\n            }\n        }\n\n        // Pick random valid coords\n        const moves = opponentBoard.getAvailableMoves();\n        if (moves.length === 0) return null;\n        const idx = Math.floor(Math.random() * moves.length);\n        return moves[idx];\n    }\n\n    recordAttackResult(coord, wasHit, opponentBoard) {\n        if (!wasHit) return;\n\n        // Find ship at coord\n        const [x, y] = coord;\n        const ship = opponentBoard.grid[x][y];\n        if (!ship) return;\n\n        // Reset targetQueue if new ship\n        if (ship !== this.lastHitShip) {\n            this.lastHitShip = ship;\n            this.targetQueue = [];\n        }\n\n        // If hit ship not sunk, target 4 possible areas\n        if (!ship.hasSunk()) {\n            // Set possible attack coords based on hit position\n            const deltas = [[1, 0], [-1, 0], [0, 1], [0, -1]];\n            const moves = opponentBoard.getAvailableMoves();\n            // Adjust attack coords based on hit position\n            for (const [dx, dy] of deltas) {\n                const nx = x + dx;\n                const ny = y + dy;\n                if (\n                    nx >= 0 && nx < 10 &&\n                    ny >= 0 && ny < 10 &&\n                    moves.some(m => m[0] === nx && m[1] === ny)) {\n                    this.targetQueue.push([nx, ny]);\n                }\n            }\n        } else {\n            // Ship sank, clear variables\n            this.lastHitShip = null;\n            this.targetQueue = [];\n        }\n    }\n}\n\nexport { Player };","// ship.js\nclass Ship {\n    constructor(length) {\n        this.length = length;\n        this.timesHit = 0;\n        this.isSunk = false;\n    }\n\n    hit() {\n        if (this.isSunk) {\n            return;\n        }\n\n        this.timesHit += 1;\n\n        if (this.timesHit === this.length) {\n            this.isSunk = true;\n        }\n    }\n\n    hasSunk() {\n        return this.timesHit >= this.length;\n    }\n}\n\nexport { Ship };","// index.js\nimport \"../styles/styles.css\";\nimport \"../styles/reset.css\";\nimport { createGrid, renderBoard } from './modules/dom.js';\nimport { Player } from './modules/player.js';\nimport { Ship } from './modules/ship.js';\n\n// DOM elements\nconst modal = document.getElementById('startModal');\nconst modalText = document.querySelector('#startModal p');\nconst startBtn = document.getElementById('start-btn');\nconst playerGridContainer = document.getElementById('player-grid');\nconst enemyGridContainer = document.getElementById('enemy-grid');\nconst rotateBtn = document.getElementById('rotate-btn');\nconst playerMsg = document.getElementById('player-msg');\nconst computerMsg = document.getElementById('computer-msg');\n\n// Game state\nlet human;\nlet enemy;\nlet gameActive = false;  // true when battle can begin\nlet shipOrientation = 'horizontal';\nconst shipLengths = [5, 4, 3, 3, 2];\nlet nextShipIndex = 0;\n\n// Update rotate button label\nfunction updateRotateLabel() {\n    rotateBtn.textContent = `Orientation: ${shipOrientation}`;\n}\n\n// Randomly place computer ships\nfunction randomPlaceAllShips(board) {\n    shipLengths.forEach(length => {\n        let placed = false;\n        while (!placed) {\n            const orientation = Math.random() < 0.5 ? 'horizontal' : 'vertical';\n            const x = Math.floor(Math.random() * 10);\n            const y = Math.floor(Math.random() * 10);\n            placed = board.placeShip(new Ship(length), [x, y], orientation);\n        }\n    });\n}\n\n// Start placement when Start button clicked\nstartBtn.addEventListener('click', () => {\n    modal.style.display = 'none';\n    startPlacementPhase();\n    playerMsg.textContent = 'Place your ships.';\n});\n\n// Begin player ship placement\nfunction startPlacementPhase() {\n    human = new Player('human');\n    enemy = new Player('computer');\n\n    randomPlaceAllShips(enemy.gameboard);\n\n    gameActive = false;\n    shipOrientation = 'horizontal';\n    nextShipIndex = 0;\n    document.body.dataset.shipOrientation = shipOrientation;\n    playerMsg.textContent = '';\n    computerMsg.textContent = '';\n\n    createGrid(playerGridContainer);\n    createGrid(enemyGridContainer);\n\n    renderBoard(playerGridContainer,\n        human.gameboard.grid,\n        human.gameboard.hitShots,\n        human.gameboard.missedShots,\n        false\n    );\n    renderBoard(enemyGridContainer,\n        enemy.gameboard.grid,\n        enemy.gameboard.hitShots,\n        enemy.gameboard.missedShots,\n        true\n    );\n\n    rotateBtn.disabled = false;\n    rotateBtn.style.display = 'inline-block';\n    updateRotateLabel();\n\n    rotateBtn.addEventListener('click', onRotateOrientation);\n    playerGridContainer.addEventListener('mouseover', onCellHover);\n    playerGridContainer.addEventListener('mouseout', onCellOut);\n    playerGridContainer.addEventListener('click', onCellClick);\n}\n\n// Toggle orientation\nfunction onRotateOrientation() {\n    shipOrientation = shipOrientation === 'horizontal' ? 'vertical' : 'horizontal';\n    document.body.dataset.shipOrientation = shipOrientation;\n    updateRotateLabel();\n}\n\n// Validate placement\nfunction canPlaceShip(x, y, length, orientation) {\n    const grid = human.gameboard.grid;\n    if (orientation === 'vertical' && x + length > 10) return false;\n    if (orientation === 'horizontal' && y + length > 10) return false;\n    for (let i = 0; i < length; i++) {\n        const px = orientation === 'vertical' ? x + i : x;\n        const py = orientation === 'horizontal' ? y + i : y;\n        if (grid[px][py] !== null) return false;\n    }\n    return true;\n}\n\n// Show preview on hover\nfunction onCellHover(e) {\n    if (gameActive) return;\n    const cell = e.target.closest('.cell');\n    if (!cell) return;\n\n    clearPreview();\n    const [x, y] = cell.dataset.coord.split(',').map(Number);\n    const length = shipLengths[nextShipIndex];\n    const coords = getPreviewCoords(x, y, length, shipOrientation);\n    const valid = canPlaceShip(x, y, length, shipOrientation);\n\n    coords.forEach(([px, py]) => {\n        const c = playerGridContainer.querySelector(\n            `.cell[data-coord=\"${px},${py}\"]`\n        );\n        if (c) c.classList.add(valid ? 'preview' : 'invalid');\n    });\n}\n\n// Remove previews\nfunction onCellOut() {\n    clearPreview();\n}\n\nfunction clearPreview() {\n    document.querySelectorAll('.cell.preview, .cell.invalid')\n        .forEach(c => c.classList.remove('preview', 'invalid'));\n}\n\n// Place ship on click\nfunction onCellClick(e) {\n    if (gameActive) return;\n    const cell = e.target.closest('.cell');\n    if (!cell) return;\n\n    clearPreview();\n    const [x, y] = cell.dataset.coord.split(',').map(Number);\n    const length = shipLengths[nextShipIndex];\n    const placed = human.gameboard.placeShip(\n        new Ship(length), [x, y], shipOrientation\n    );\n\n    if (!placed) {\n        playerMsg.textContent = '❗ Invalid placement';\n        return;\n    }\n\n    renderBoard(playerGridContainer,\n        human.gameboard.grid,\n        human.gameboard.hitShots,\n        human.gameboard.missedShots,\n        false\n    );\n\n    nextShipIndex++;\n    playerMsg.textContent = `Placed length-${length} ship.`;\n\n    if (nextShipIndex >= shipLengths.length) {\n        rotateBtn.removeEventListener('click', onRotateOrientation);\n        playerGridContainer.removeEventListener('mouseover', onCellHover);\n        playerGridContainer.removeEventListener('mouseout', onCellOut);\n        playerGridContainer.removeEventListener('click', onCellClick);\n\n        rotateBtn.disabled = true;\n        rotateBtn.style.display = 'none';\n        playerMsg.textContent = 'All ships placed! Begin battle.';\n        gameActive = true;\n    } else {\n        const nextLen = shipLengths[nextShipIndex];\n        playerMsg.textContent += ` Next: length-${nextLen}`;\n    }\n}\n\n// Calculate ship coords\nfunction getPreviewCoords(x, y, length, orientation) {\n    const coords = [];\n    for (let i = 0; i < length; i++) {\n        const px = orientation === 'vertical' ? x + i : x;\n        const py = orientation === 'horizontal' ? y + i : y;\n        coords.push([px, py]);\n    }\n    return coords;\n}\n\n// Battle phase: player clicks enemy\nenemyGridContainer.addEventListener('click', (e) => {\n    if (!gameActive) return;\n    const cell = e.target.closest('.cell');\n    if (!cell) return;\n\n    // Prevent repeat shots\n    if (\n        cell.classList.contains('hit') ||\n        cell.classList.contains('miss') ||\n        cell.classList.contains('sunk')\n    ) {\n        playerMsg.textContent = '❗ You already fired there.';\n        computerMsg.textContent = '';\n        return;\n    }\n\n    const [x, y] = cell.dataset.coord.split(',').map(Number);\n    const playerHit = enemy.gameboard.receiveAttack([x, y]);\n    renderBoard(enemyGridContainer,\n        enemy.gameboard.grid,\n        enemy.gameboard.hitShots,\n        enemy.gameboard.missedShots,\n        true\n    );\n    playerMsg.textContent = playerHit ? '🎯 You hit!' : '💧 You missed…';\n\n    if (enemy.gameboard.allShipsSunk()) {\n        playerMsg.textContent = '🏆 You win!';\n        computerMsg.textContent = '';\n        modal.style.display = 'flex';\n        gameActive = false;\n        modalText.textContent = 'You win! Play again?';\n        return;\n    }\n\n    // Computer's turn\n    const [cx, cy] = enemy.chooseRandomAttack(human.gameboard);\n    const compHit = human.gameboard.receiveAttack([cx, cy]);\n    // If attack was a hit, record attack coords\n    enemy.recordAttackResult([cx, cy], compHit, human.gameboard);\n\n    renderBoard(playerGridContainer,\n        human.gameboard.grid,\n        human.gameboard.hitShots,\n        human.gameboard.missedShots,\n        false\n    );\n\n    computerMsg.textContent = compHit\n        ? `🤖 Computer hit at [${cx},${cy}]!`\n        : `🤖 Computer missed at [${cx},${cy}].`;\n\n    if (human.gameboard.allShipsSunk()) {\n        computerMsg.textContent = ' 💀 You lose';\n        playerMsg.textContent = \"\";\n        modal.style.display = 'flex';\n        modalText.textContent = 'You lose... Play again?';\n        gameActive = false;\n    }\n});\n"],"names":[],"sourceRoot":""}